fm = fimath('RoundingMethod','Nearest',...
            'OverflowAction','Saturate', ...
            'ProductMode','SpecifyPrecision', ...
            'ProductWordLength', 16, ...
            'ProductFractionLength', 15, ...
            'SumMode', 'SpecifyPrecision', ...
            'SumWordLength', 16, ...
            'SumFractionLength', 15, ...
            'CastBeforeSum', true);
nt1 = numerictype(1, 16, 15);
initState = complex(fi([0.772790905621241; 0.631669339981830],nt1,fm),...
    fi([0.052860346093275; 0.031525306135226],nt1,fm));
initState_bin = bin(initState);
opName = fi([13;12;11],0,16,0);
nt = numerictype(1,16,13);
template = fi([],nt,fm);
theta = cast([0;0;0],'like',template);
theta(:) = [-pi/2; pi/4; pi/6];
theta_bin = bin(theta);
phi = cast([0;0;0],'like',template);
phi(:) = [pi/4; -pi/2; -pi/2];
lambda = cast([0;0;0],'like',template);
lambda(:) = [-pi/9; pi/3; -pi/9];
lambda_bin = bin(lambda);
[computerState_my, probFinal_my] = quantumComputer_oneQubit(opName,theta,...
    phi,lambda,initState);
computerState_bin_my = bin(computerState_my);
probFinal_bin_my = bin(probFinal_my);